plugins {
    id 'java-library'
    id 'maven-publish'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

configurations {
    provided
    compileClasspath.extendsFrom provided
    testClasspath.extendsFrom provided
}

dependencies {
    api project(':base-api')
    provided project(':doclet')
    api 'com.opencsv:opencsv:3.10'
    api 'com.fasterxml.jackson.core:jackson-databind:2.6.5'
    api 'com.github.jupyter:jvm-repr:0.3.1'
    api 'commons-io:commons-io:2.5'
    api 'commons-cli:commons-cli:1.2'
    api 'org.apache.maven.shared:maven-invoker:3.0.0'
    api 'org.slf4j:slf4j-log4j12:1.7.25'
    api 'org.apache.httpcomponents:fluent-hc:4.5.5'
    api 'net.sf.py4j:py4j:0.10.9.7'
    api 'org.apache.commons:commons-text:1.3'
    api 'commons-io:commons-io:2.16.1'
    api 'io.javalin:javalin:1.7.0'
    api 'org.zeromq:jeromq:0.3.5'
    api 'org.apache.ivy:ivy:2.4.0'
    api 'junit:junit:4.11'
    api 'org.assertj:assertj-core:3.6.1'

    testImplementation 'org.reflections:reflections:0.9.10'
    testImplementation project(':base-test')
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.twosigma'
            artifactId 'beakerx-kernel-base'
            version project.version
            from components.java
        }
    }
}

def gitGetHash() {
    def name = "git log --pretty=format:%h -n 1".execute().text.trim()
    return name
}

def gitGetCommitHash() {
    return "git rev-list --tags --max-count=1".execute().text.trim()
}

def gitGetLatestTagVersion() {
    def commitHash = gitGetCommitHash()
    def gitLatestTag = "git describe --tags $commitHash".execute().text.trim()
    return gitLatestTag
}

task prepareBuildVersion {
    doLast {
        new File("$projectDir/src/main/resources", 'version').write(gitGetLatestTagVersion())
        new File("$projectDir/src/main/resources", 'hash').write(gitGetHash())
        new File("$projectDir/src/main/resources", 'build_time').write(new Date().format("yyyy-MM-dd HH:mm z"))
        new File("$rootDir", 'VERSION').write(gitGetLatestTagVersion())
    }
}

compileJava {
    dependsOn prepareBuildVersion
}

task jvmInspectJavaDoc(type: Javadoc, dependsOn: compileJava) {
    dependsOn('compileJava')
    source = sourceSets.main.allJava
    classpath += configurations.compileClasspath
    options.doclet = "com.twosigma.beakerx.doclet.BeakerxDoclet"
    options.docletpath = files(
            configurations.compileClasspath.find { it.name.startsWith("doclet-") },
            sourceSets.main.compileClasspath
    ).getFiles().toList()
    
    options.addStringOption("subpackages", "com.twosigma.beakerx")
    options.addStringOption("sourcepath", "../base/src/main/java")
}

task moveInspectJson(type: Copy, dependsOn: jvmInspectJavaDoc) {
    from("beakerx_inspect.json")
    into("build/resources/main")
}

jar.dependsOn moveInspectJson
jvmInspectJavaDoc.finalizedBy moveInspectJson
compileJava.finalizedBy jvmInspectJavaDoc